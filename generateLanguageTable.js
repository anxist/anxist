const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –í–∞—à GitHub username
const username = 'anxist'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π GitHub username

// URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const reposUrl = `https://api.github.com/users/${username}/repos?per_page=100`;

// –ü—É—Ç—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
const cacheFile = path.join(__dirname, 'cache.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
const createProgressBar = (percentage, barLength = 20) => {
    percentage = Math.max(0, Math.min(100, percentage));
    const filledLength = Math.round(barLength * percentage / 100);
    if (filledLength < 0 || filledLength > barLength) {
        console.error(`Invalid filledLength value: ${filledLength}`);
        return 'Error';
    }
    const bar = 'üü©'.repeat(filledLength) + 'üü®'.repeat(0) + '‚¨ú'.repeat(barLength - filledLength);
    return bar;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
const generateTable = (languages) => {
    const totalBytes = Object.values(languages).reduce((acc, bytes) => acc + bytes, 0);
    if (totalBytes === 0) {
        throw new Error('Total bytes of code is zero. Cannot generate table.');
    }
    const sortedLanguages = Object.entries(languages)
        .sort(([, bytesA], [, bytesB]) => bytesB - bytesA);
    const maxLanguageLength = Math.max(...sortedLanguages.map(([language]) => language.length), 10);
    const maxUsageLength = 40; // –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const maxPercentageLength = 8; // –î–ª–∏–Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const tableHeader = `| üåê Language${' '.repeat(maxLanguageLength - 13)} | üìä Usage${' '.repeat(maxUsageLength - 8)} | üìà Percentage |\n` +
        `|${'-'.repeat(maxLanguageLength + 2)}|${'-'.repeat(maxUsageLength + 2)}|${'-'.repeat(maxPercentageLength + 2)}|\n`;
    const tableRows = sortedLanguages.map(([language, bytesOfCode]) => {
        const percentage = (bytesOfCode / totalBytes * 100).toFixed(2);
        return `| ${language.padEnd(maxLanguageLength)} | ${createProgressBar(percentage).padEnd(maxUsageLength)} | ${percentage.padStart(maxPercentageLength)}% |`;
    }).join('\n');
    return tableHeader + tableRows;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏–∑ GitHub API
const getRepos = async () => {
    if (fs.existsSync(cacheFile)) {
        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        const cachedData = JSON.parse(fs.readFileSync(cacheFile, 'utf8'));
        return cachedData.repos || [];
    } else {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        try {
            const response = await axios.get(reposUrl, {
                headers: {
                    'User-Agent': 'axios'
                }
            });
            const repos = response.data;
            fs.writeFileSync(cacheFile, JSON.stringify({ repos }), 'utf8');
            return repos;
        } catch (error) {
            console.error('Error fetching repositories:', error.message);
            return [];
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
const fetchLanguages = async () => {
    try {
        const repos = await getRepos();
        console.log(`Fetched ${repos.length} repositories.`);

        const languageCount = {};
        const maxRepos = 30; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞

        for (let i = 0; i < Math.min(repos.length, maxRepos); i++) {
            const repo = repos[i];
            const languagesUrl = repo.languages_url;

            try {
                const languagesResponse = await axios.get(languagesUrl, {
                    headers: {
                        'User-Agent': 'axios'
                    }
                });
                const languages = languagesResponse.data;
                console.log(`Fetched languages for repo ${repo.name}`);

                for (const [language, bytesOfCode] of Object.entries(languages)) {
                    if (languageCount[language]) {
                        languageCount[language] += bytesOfCode;
                    } else {
                        languageCount[language] = bytesOfCode;
                    }
                }
            } catch (error) {
                console.error(`Error fetching languages for repo ${repo.name}:`, error.message);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        const table = generateTable(languageCount);
        console.log(table);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ README.md
        fs.appendFileSync('README.md', `\n## üåü Most Used Languages\n\n${table}\n`, 'utf8');
        console.log('Table successfully added to README.md');
    } catch (error) {
        console.error('Error fetching data:', error.message);
    }
};

fetchLanguages();